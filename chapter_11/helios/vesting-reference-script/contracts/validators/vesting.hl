spending vesting
const version: String = "2024-09-03-1.0.9"

/* 
 Create a datum with the owner PubKeyHash that will be included 
 into each UTXO locked at this script address.
*/
struct Datum {
    owner: PubKeyHash
}

/*
 The vesting contract can be either cancelled by the owner
 or claimed by the beneificiary
 */
enum Redeemer {
    Cancel
    Claim {
        msg: String
    }
}

// Add message constant as a contract paramater
const MESSAGE: String = "Hello World!"

// Define the main validator function
func main(datum: Datum, redeemer: Redeemer, ctx: ScriptContext) -> Bool {
    print("version: " + version);
    tx: Tx = ctx.tx;

    // Depending on the redeemer provided in the 
    // transaction, process accordingly.
    redeemer.switch {
        Cancel => {
            // Tx must be singed by pkh in datum
            tx.is_signed_by(datum.owner).trace("VVL1: ") 
        },
        red: Claim => {
            // Redeemer must match the message to spend this UTXO
            (red.msg == MESSAGE).trace("VVL2: ") 
        }
    }    
}