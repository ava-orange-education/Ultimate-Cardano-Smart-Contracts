spending vesting
const VERSION: String = "2024-08-30-1.0.8"
/* 
 Create a datum with the owner PubKeyHash that will be included 
 into each UTXO locked at this script address.
*/
struct Datum {
    owner: PubKeyHash
}

/*
 The vesting contract can be either cancelled by the owner
 or claimed by the beneificiary
 */
enum Redeemer {
    Cancel
    Claim {
        msg: String
    }
}

// Add message constant as a contract parameter
const MESSAGE: String = "Hello World!"

// Define the main validator function
func main(datum: Datum, redeemer: Redeemer, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    print(VERSION);

    // Depending on the redeemer provided in the transaction, process accordingly.
    redeemer.switch {
        Cancel => {
            // Tx must be signed by pkh in datum
            tx.is_signed_by(datum.owner) 
        },
        red: Claim => {
            // Redeemer must match the message to spend this UTXO
            red.msg == MESSAGE 
        }
    }    
}
